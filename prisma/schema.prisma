// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Book {
  asin      String  @id @unique

  title     String
  subtitle  String?
  copyRight String?
  description String?
  summary   String?
  bookFormat    String?
  lengthMin    Float?

  image     String?
  explicit   Boolean?
  isbn      String?
  language  String?
  publisherName String?

  rating    Float?
  regions   String[]

  series SeriesBook[]
  authors BookAuthor[]
  narrators BookNarrator[]
  genres    BookGenre[]

  releaseDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index(asin)
}

model SeriesBook {
  series     Series  @relation(fields: [seriesAsin], references: [asin])
  seriesAsin String

  book       Book    @relation(fields: [bookAsin], references: [asin])
  bookAsin   String

  position   String

  @@id([seriesAsin, bookAsin])
}

model Genre {
  asin      String  @id @unique
  name      String
  type      String

  books     BookGenre[]
  authors   AuthorGenre[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(asin)
}

model Narrator {
  id        Int     @id @default(autoincrement())
  name      String  @unique

  books     BookNarrator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuthorGenre {
  author Author @relation(fields: [authorAsin, authorRegion], references: [asin, region])
  authorAsin String
  authorRegion String

  genre Genre @relation(fields: [genreAsin], references: [asin])
  genreAsin String

  @@id([authorAsin, authorRegion, genreAsin])
}

model Author {
  asin String
  region String
  name String

  image String?
  description String?
  genres AuthorGenre[]

  books BookAuthor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([asin, region])
  @@index(asin)
}

model BookAuthor {
  book Book @relation(fields: [bookAsin], references: [asin])
  bookAsin String

  author Author @relation(fields: [authorAsin, authorRegion], references: [asin, region])
  authorAsin String
  authorRegion String

  @@id([bookAsin, authorAsin, authorRegion])
}

model Series {
  asin      String  @id @unique
  title     String
  description String?
  books     SeriesBook[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(asin)
}

model BookSearch {
  id        Int     @id @default(autoincrement())
  query     String  @unique
  result    String[]
  count     Int   @default(1)
  createdAt DateTime @default(now())
}

model Chapter {
  bookAsin  String  @unique @id

  content   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookNarrator {
  book       Book     @relation(fields: [bookAsin], references: [asin], onDelete: Cascade)
  bookAsin   String
  narrator   Narrator @relation(fields: [narratorId], references: [id], onDelete: Cascade)
  narratorId Int

  @@id([bookAsin, narratorId])
  @@index([narratorId])
}

model BookGenre {
  book      Book   @relation(fields: [bookAsin], references: [asin], onDelete: Cascade) // Add onDelete if desired
  bookAsin  String
  genre     Genre  @relation(fields: [genreAsin], references: [asin], onDelete: Cascade) // Add onDelete if desired
  genreAsin String

  @@id([bookAsin, genreAsin])
  @@index([genreAsin])
}